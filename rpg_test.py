# -*- coding: utf-8 -*-
"""RPG_TEST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vmKPVEmdjH5DcV7GO11kd0rRubLUc0US

Dungeon Crawling RPG tapi dalam bentuk text
"""

import random
import time

class Player:
    def __init__(self, name, health=100, damage=20):
        self.name = name
        self.health = health
        self.damage = damage
        self.shield = 0  # Variable to store shield strength

    def is_alive(self):
        return self.health > 0

    def attack(self, enemy):
        damage_dealt = random.randint(1, self.damage)
        critical = damage_dealt >= 20

        # Check if there's a shield and reduce damage accordingly
        effective_damage = max(0, damage_dealt - self.shield)

        # Deplete the shield by the amount of damage received
        self.shield = max(0, self.shield - effective_damage)

        enemy.health -= effective_damage
        return effective_damage, critical

    def apply_shield(self):
        shield_strength = random.randint(10, 20)
        print(f"\n{self.name} applies a shield. Shield strength: {shield_strength}")
        self.shield = shield_strength

    def increase_attack(self):
        self.damage += random.randint(5, 10)
        print(f"\n{self.name}'s attack increases. New damage: {self.damage}")

class Enemy:
    def __init__(self, name, health=50, damage=15):
        self.name = name
        self.health = health
        self.damage = damage

    def is_alive(self):
        return self.health > 0

    def attack(self, player):
        damage_dealt = random.randint(1, self.damage)

        # Check if the player has a shield and reduce damage accordingly
        effective_damage = max(0, damage_dealt - getattr(player, 'shield', 0))

        # Deplete the player's shield by the amount of damage dealt
        player.shield = max(0, player.shield - damage_dealt)

        player.health -= effective_damage

        if effective_damage == 0:
            print(f"{self.name} strikes at {player.name}, but the attack is blocked by the shield.")
        else:
            print(f"{self.name} strikes at {player.name} dealing {effective_damage} damage.")

        return effective_damage

# ... (rest of the code remains unchanged)


class MagicUser(Player):
    def __init__(self, name, health=100, damage=15, magic_points=50, magic_damage=30, mp_regeneration_rate=5):
        super().__init__(name, health, damage)
        self.magic_points = magic_points
        self.magic_damage = magic_damage
        self.mp_regeneration_rate = mp_regeneration_rate

    def cast_spell(self, enemy):
        print("\nSelect a magic type:")
        print("1. Protective Magic (Shield)")
        print("2. Buff Magic (Increase Attack)")
        magic_type = input("Enter the number corresponding to the magic type: ")

        if magic_type == "1":
            return self.protective_magic()
        elif magic_type == "2":
            return self.buff_magic()
        else:
            print("Invalid magic type. Casting a regular spell instead.")
            return self.cast_regular_spell(enemy)

    def protective_magic(self):
        if self.magic_points >= 15:
            self.magic_points -= 15
            self.apply_shield()
            return 0, False
        else:
            print("Not enough magic points to cast protective magic. Casting a regular spell instead.")
            return self.cast_regular_spell(enemy)

    def buff_magic(self):
        if self.magic_points >= 15:
            self.magic_points -= 15
            self.increase_attack()
            return 0, False
        else:
            print("Not enough magic points to cast buff magic. Casting a regular spell instead.")
            return self.cast_regular_spell(enemy)

    def cast_regular_spell(self, enemy):
        if self.magic_points >= 10:
            self.magic_points -= 10
            damage_dealt = random.randint(1, self.magic_damage)
            critical = damage_dealt >= 20
            enemy.health -= damage_dealt
            return damage_dealt, critical
        else:
            print("Not enough magic points to cast a spell. Try attacking instead.")
            return 0, False

    def heal(self):
        if self.magic_points >= 20:
            self.magic_points -= 20
            heal_amount = random.randint(10, 20)
            self.health += heal_amount
            return heal_amount
        else:
            print("Not enough magic points to heal. Try attacking instead.")
            return 0

    def regenerate_mp(self, action):
        if action == "1":
            print(f"\n{self.name} regenerates {self.mp_regeneration_rate} Magic Points...")
            time.sleep(1)  # Simulating a delay for regeneration
            self.magic_points += self.mp_regeneration_rate
            print(f"{self.name}'s Magic Points restored to {self.magic_points}\n")

def print_status(player, enemy, damage, critical):
    print(f"\n{player.name}'s Health: {player.health} | Magic Points: {getattr(player, 'magic_points', 'N/A')} | Shield: {player.shield}")
    print(f"{enemy.name}'s Health: {enemy.health}")

    if critical:
        print(f"\nCritical Attack! {player.name} dealt {damage} damage!")
    else:
        print(f"\n{player.name} dealt {damage} damage.")

# ... (previous code remains unchanged)

def battle(player, enemy):
    print(f"\nA wild {enemy.name} appears!")

    while player.is_alive() and enemy.is_alive():
        print_status(player, enemy, damage=None, critical=False)

        action = input("\nWhat will you do? (1. Attack, 2. Cast Spell, 3. Heal, 4. RUN) ")

        if action == "1":
            damage, critical = player.attack(enemy)
            print_status(player, enemy, damage, critical)
        elif action == "2" and isinstance(player, MagicUser):
            damage, critical = player.cast_spell(enemy)
            if damage > 0:
                print_status(player, enemy, damage, critical)
        elif action == "3" and isinstance(player, MagicUser):
            heal_amount = player.heal()
            if heal_amount > 0:
                print(f"\n{player.name} uses magic to heal and restores {heal_amount} health.")
        elif action == "4":
            if can_player_escape():
                print("\nYou managed to escape.")
                break
            else:
                print("\nPlayer failed to escape and suffered a penalty.")
                penalty_damage = random.randint(10, 20)
                player.health -= penalty_damage
                print(f"You suffered {penalty_damage} damage for failing to escape.")
        else:
            print("\nInvalid action. Try again.")

        if enemy.is_alive():
            damage_received = enemy.attack(player)
            print(f"\n{enemy.name} attacks {player.name}, dealing {damage_received} damage!")

        if isinstance(player, MagicUser):
            player.regenerate_mp(action)

    if player.is_alive():
        print(f"\n{player.name} defeated the {enemy.name}!\n")
    else:
        print("\nGame over. You were defeated.\n")

# ... (rest of the code remains unchanged)

def can_player_escape():
    escape_probability = 0.7  # Adjust as needed
    return random.random() < escape_probability

def rpg_game():
    print("Welcome to the Text-Based RPG Game!")
    player_name = input("\nEnter your character's name: ")

    # Ask the player if they want to be a magic user
    player_type = input("\nChoose your class (1. Warrior, 2. Magic User): ")

    if player_type == "1":
        player = Player(name=player_name)
    elif player_type == "2":
        player = MagicUser(name=player_name)
    else:
        print("Invalid choice. Defaulting to Warrior.")
        player = Player(name=player_name)

    enemies = [Enemy("Goblin"), Enemy("Orc"), Enemy("Dragon")]

    for enemy in enemies:
        input("\nPress Enter to continue...")
        battle(player, enemy)

    print("\nCongratulations! You finished the RPG Adventure.\n")

if __name__ == "__main__":
    rpg_game()